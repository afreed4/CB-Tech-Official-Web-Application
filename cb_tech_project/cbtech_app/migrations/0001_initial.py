# Generated by Django 4.2.3 on 2023-07-31 10:46

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=30)),
                ('course_type', models.CharField(blank=True, choices=[('Full Time', 'Full Time'), ('Crash', 'Crash'), ('Project', 'Project')], max_length=10, null=True)),
                ('course_duration', models.CharField(choices=[('Full Time', 'Full Time'), ('Crash', 'Crash'), ('Project', 'Project')], default='4 Months', max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Enquiry',
            fields=[
                ('enquiry_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('phone_no', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('email_id', models.CharField(max_length=60)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=8, null=True)),
                ('college', models.CharField(blank=True, max_length=30, null=True)),
                ('qualification', models.CharField(max_length=30, null=True)),
                ('year_of_pass', models.IntegerField(default=2023)),
                ('technical_skills', models.CharField(blank=True, max_length=60, null=True)),
                ('lead_type', models.CharField(blank=True, default='Walk-In', max_length=30, null=True)),
                ('status_of_enquiry', models.CharField(blank=True, choices=[('Not Contacted', 'Not Contacted'), ('Contacted', 'Contacted'), ('Pending', 'Pending'), ('Interested', 'Interested'), ('Not Interested', 'Not Interested'), ('Registered', 'Registered')], default='Not Contacted', max_length=15, null=True)),
                ('mode_of_class', models.CharField(blank=True, choices=[('online', 'online'), ('offline', 'offline')], max_length=8, null=True)),
                ('guardian_name', models.CharField(blank=True, max_length=40, null=True)),
                ('alternative_phone_no', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('address', models.TextField(blank=True, max_length=80, null=True)),
                ('date_of_enquiry', models.DateField(auto_now=True)),
                ('remarks', models.TextField(blank=True, max_length=120, null=True)),
                ('student_registeration_id', models.CharField(blank=True, max_length=40, null=True)),
                ('date_of_registeration', models.DateField(default=django.utils.timezone.now, null=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('course_type', models.CharField(max_length=10, null=True)),
                ('joined_date', models.DateField(blank=True, null=True)),
                ('total_amount', models.PositiveIntegerField(blank=True, null=True)),
                ('number_of_installments', models.IntegerField(default=0)),
                ('next_due_date', models.DateField(default=datetime.datetime(2023, 8, 31, 0, 28, 13, tzinfo=datetime.timezone.utc))),
                ('payment_status', models.CharField(blank=True, choices=[('P', 'Paid'), ('NP', 'Not Paid'), ('PP', 'Partially Paid'), ('EMI', 'EMI')], max_length=5, null=True)),
                ('payment_remark', models.CharField(blank=True, max_length=120, null=True)),
                ('payment_method', models.CharField(blank=True, choices=[('U', 'UPI'), ('BT', 'Bank Transfer'), ('CC', 'Credit Card'), ('DC', 'Debit Card')], max_length=5, null=True)),
                ('course_status', models.CharField(blank=True, choices=[('J', 'Joined'), ('P', 'Pursuing'), ('C', 'completed'), ('D', 'Dropped')], max_length=5, null=True)),
                ('declaration_type', models.CharField(choices=[('Digital', 'Digital'), ('Online', 'Online')], max_length=10, null=True)),
                ('declaration', models.CharField(choices=[('y', 'Yes'), ('n', 'No')], max_length=10, null=True)),
                ('consultant_name', models.CharField(default='', max_length=10)),
                ('faculty_name', models.CharField(blank=True, max_length=20, null=True)),
                ('reference_name', models.CharField(blank=True, max_length=40, null=True)),
                ('reference_contact_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('marketing_manager', models.CharField(blank=True, max_length=40, null=True)),
                ('office', models.CharField(blank=True, choices=[('Kadavanthra', 'Kadavanthra'), ('Trivandrum', 'Trivandrum')], default=('Kadavanthra', 'Kadavanthra'), max_length=13, null=True)),
                ('updated_by', models.CharField(max_length=40)),
                ('course', models.OneToOneField(blank=True, choices=[(1, 'Python DJango ')], null=True, on_delete=django.db.models.deletion.CASCADE, to='cbtech_app.courses')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('staff_type', models.CharField(choices=[('admin', 'Administrator'), ('faculty', 'Faculty'), ('counsellor', 'Counsellor'), ('accountant', 'Accountant')], max_length=12)),
                ('contact_number', models.CharField(max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
